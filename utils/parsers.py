import requests
from datetime import datetime, timedelta
import sqlite3
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ghost CMS
GHOST_API_URL = "https://your-ghost-blog.com/ghost/api/v3/content"
GHOST_API_KEY = "your-api-key-here"
GHOST_POSTS_LIMIT = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

def get_recent_posts():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ Ghost CMS"""
    headers = {
        "Accept-Version": "v3",
        "Authorization": f"Ghost {GHOST_API_KEY}"
    }
    
    params = {
        "limit": GHOST_POSTS_LIMIT,
        "fields": "id,title,url,created_at,published_at,updated_at,excerpt",
        "order": "published_at DESC"
    }
    
    try:
        response = requests.get(f"{GHOST_API_URL}/posts/", headers=headers, params=params)
        response.raise_for_status()
        return response.json().get('posts', [])
    except Exception as e:
        print(f"Error fetching Ghost posts: {e}")
        return []

async def check_new_posts(bot: Bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    cursor.execute("SELECT value FROM bot_state WHERE key = 'last_post_check'")
    last_check_row = cursor.fetchone()
    last_check = datetime.now() - timedelta(hours=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 —á–∞—Å –Ω–∞–∑–∞–¥
    if last_check_row:
        last_check = datetime.fromisoformat(last_check_row[0])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
    posts = get_recent_posts()
    new_posts = [
        post for post in posts 
        if datetime.fromisoformat(post['published_at'][:-1]) > last_check
    ]
    
    if not new_posts:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    new_last_check = datetime.now().isoformat()
    cursor.execute(
        "INSERT OR REPLACE INTO bot_state (key, value) VALUES (?, ?)",
        ('last_post_check', new_last_check)
    )
    conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    for post in new_posts:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π/–∞–≤—Ç–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
        # (–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫)
        
        message_text = (
            f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç: {post['title']}\n\n"
            f"{post.get('excerpt', '')}\n\n"
            f"–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: {post['url']}"
        )
        
        # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å)
        cursor.execute("SELECT user_id FROM users")
        for (user_id,) in cursor.fetchall():
            try:
                await bot.send_message(user_id, message_text)
            except Exception as e:
                print(f"Error sending to user {user_id}: {e}")
    
    conn.close()

async def scheduled_post_check(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    while True:
        await check_new_posts(bot)
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç